# Copyright (C) Max Mu
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# version 2, as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License version 2 for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
# 
# Please visit www.joshvm.org if you need additional information or
# have any questions.

export ENABLE_SOFT_FLOAT     := true
export ENABLE_SOFT_FLOAT__BY := javacall_armv7m_gcc.cfg
export ENABLE_FLOAT          := true
export ENABLE_FLOAT__BY      := javacall_armv7m_gcc.cfg
export ENABLE_COMPILER                  := true
export ENABLE_COMPILER__BY              := javacall_armv7m_gcc.cfg
export ENABLE_THUMB_COMPILER                  := true
export ENABLE_THUMB_COMPILER__BY              := javacall_armv7m_gcc.cfg
export ENABLE_THUMB_REGISTER_MAPPING		:= true
export ENABLE_THUMB_REGISTER_MAPPING__BY	:= javacall_armv7m_gcc.cfg
export ENABLE_THUMB_GP_TABLE		:= true
export ENABLE_THUMB_GP_TABLE__BY	:= javacall_armv7m_gcc.cfg
export ENABLE_ARM_V6T2		:= true
export ENABLE_ARM_V6T2__BY	:= javacall_armv7m_gcc.cfg
export ENABLE_ARM_V7		:= false
export ENABLE_ARM_V7__BY	:= javacall_armv7m_gcc.cfg
export ENABLE_CLDC_111                  := true
export ENABLE_CLDC_111__BY              := javacall_armv7m_gcc.cfg

#MakeDepsMain_javacall = WinGammaPlatform
#MakeDepsOpts_javacall = -resolveVpath true

INVALID_JAVACALL_OUTPUT_DIR = (\
echo ===================================================================== ; \
echo JAVACALL_OUTPUT_DIR \(environment or GNUmake variable\) must be set.  ; \
echo Please set it such that it is possible to access                      ; \
echo \$${JAVACALL_OUTPUT_DIR}/inc and \$${JAVACALL_OUTPUT_DIR}/lib         ; \
echo directories.                                                          ; \
echo ===================================================================== )

ifeq ($(JAVACALL_OUTPUT_DIR),)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error JAVACALL_OUTPUT_DIR is not set)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR); then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR} does not point to a directory)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR)/inc; then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR/inc} is not a directory)
endif
ifneq ($(shell if test -d $(JAVACALL_OUTPUT_DIR)/lib; then echo valid; fi),valid)
  $(shell $(INVALID_JAVACALL_OUTPUT_DIR) 1>&2)
  $(error $${JAVACALL_OUTPUT_DIR/lib} is not a directory)
endif

ifneq ($(findstring CYGWIN, $(shell uname)), CYGWIN)
    define fixcygpath_m
    echo $(1)
    endef
else
    define fixcygpath_m
    echo $(1) | xargs -n1 cygpath -m
    endef
endif

ifneq ($(findstring Linux, $(shell uname)), Linux)
    host_os = win32
	host_compiler = visCPP
	MakeDepsMain_javacall = WinGammaPlatform
	MakeDepsOpts_javacall = -resolveVpath true
else
    host_os = linux
	host_compiler = gcc
	MakeDepsMain_javacall = UnixPlatform
	MakeDepsOpts_javacall = -resolveVpath true
endif


host_arch           = i386

ifeq ($(IsLoopGen),true)
    # LoopGen: an .exe that runs on the HOST. It has
    # an ARM assembler loop generator and will generate the ARM
    # assembler loop.
    os_family          = $(host_os)
    arch               = thumb2
    compiler           = $(host_compiler)
	
	LOOP_GEN_FLAGS = +GenerateGNUCode
ifeq ($(host_compiler),visCPP)
	CPP_DEF_FLAGS      +=  /D_CRT_SECURE_NO_WARNINGS
endif
ifeq ($(host_compiler),gcc)
	CPP_DEF_FLAGS      +=  -m32
	LINK_FLAGS += -m32 -lpthread
endif
    CPP_DEF_FLAGS      += -DARM -DCROSS_GENERATOR=1 
endif

ifeq ($(IsRomGen),true)
    # RomGem: an .exe that runs on the HOST. It has
    # an i386 assembler or C loop. It runs on the HOST to
    # generate the (machine independent) ROM.cpp file.
    os_family      = $(host_os)
    arch           = c
    compiler       = $(host_compiler)
		
    ROM_GEN_FLAGS  = +GenerateGNUCode
	#LOOP_GEN_FLAGS = +GenerateGNUCode
	
	#override arch                           := c
    carch                                    = thumb2
    #iarch                                    = c
	
	ifeq ($(host_compiler),visCPP)
    CPP_DEF_FLAGS  +=  /D_CRT_SECURE_NO_WARNINGS
	endif
	
	ifeq ($(host_compiler),gcc)
		CPP_DEF_FLAGS += -m32
		ASM_FLAGS += --32 
		LINK_FLAGS += -m32 -lpthread
	endif
	
	CPP_DEF_FLAGS  += -DCROSS_GENERATOR=1
	
	export ENABLE_C_INTERPRETER            := true
	export ENABLE_C_INTERPRETER__BY        := javacall_arm_gcc.cfg
    export ENABLE_INTERPRETER_GENERATOR    := false
    export ENABLE_INTERPRETER_GENERATOR__BY:= javacall_arm_gcc.cfg

endif

ifeq ($(IsTarget),true)
export ENABLE_PCSL = true
export ENABLE_PCSL := true
export ENABLE_COMPILATION_WARNINGS := true

    # target/{cldc_vm.axf, cldc_vm_r.axf, cldc_vm_g.axf}.
    # These are pure STUB/ARM binaries that run on the TARGET.
	target_platform = linux_javacall
    os_family = javacall
    arch      = thumb2
    compiler  = gcc

ifneq ($(PLATFORM_EXTRA_MAKEFILE_DIR)x, x)
	include $(PLATFORM_EXTRA_MAKEFILE_DIR)/platform_extra.gmk
    PLATFORM_CFLAGS += $(PLATFORM_EXTRA_CFLAGS)
endif

	export skip_link_image := true

    ifeq ($(USE_DEBUG),true)
    BUILD_EXT_javacall=_g
    else
    BUILD_EXT_javacall=
    endif

    JAVACALL_INCLUDE_DIR=$(JAVACALL_OUTPUT_DIR)/inc
    JAVACALL_LIB_DIR=$(JAVACALL_OUTPUT_DIR)/lib
	
	CPP_DEF_FLAGS += -I$(JAVACALL_INCLUDE_DIR)	
	CPP_DEF_FLAGS += -Wno-narrowing

    ifndef MERGE_SOURCE_FILES
    MERGE_SOURCE_FILES  = true
    endif

    ifndef SOURCE_MERGER_SIZE
    SOURCE_MERGER_SIZE  = 35
    endif

	CPP_DEF_FLAGS += $(PLATFORM_CFLAGS)
	
#    ifeq ($(ENABLE_THUMB_VM), true)
#        THUMB_CFLAGS            = -mthumb -mthumb-interwork
#        ARM_CFLAGS              = -mthumb-interwork
#
#        ASM_FLAGS              += -mthumb-interwork
#
#		LOOP_GEN_FLAGS += +GenerateThumbInterwork
#    endif
	
	ROM_GEN_FLAGS  = +GenerateGNUCode
	LOOP_GEN_FLAGS = +GenerateGNUCode

    ifeq ($(ENABLE_SOFT_FLOAT), true)
    CPP_DEF_FLAGS +=
    LINK_FLAGS    += 
    endif

    # Always disable timer thread on 
    export ENABLE_TIMER_THREAD     := false
    export ENABLE_TIMER_THREAD__BY := javacall_armv7m_gcc.cfg
endif
